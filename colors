#!/bin/lua
-- Функция для преобразования HEX в RGB
function HEXtoRGB(hex)
    hex = hex:gsub('#', '') -- Удаляем символ #
    if #hex == 3 then
        return tonumber('0x'..hex:sub(1,1)) * 17, tonumber('0x'..hex:sub(2,2)) * 17, tonumber('0x'..hex:sub(3,3)) * 17
    elseif #hex == 6 then
        return tonumber('0x'..hex:sub(1,2)), tonumber('0x'..hex:sub(3,4)), tonumber('0x'..hex:sub(5,6))
    else
        return 0, 0, 0 -- Возвращаем черный цвет при некорректном вводе
    end
end

-- Функция для преобразования RGB в HEX
function RGBtoHEX(r, g, b)
    return string.format('#%02x%02x%02x', r, g, b)
end

-- Функция для вычисления дополнительного цвета
function getComplementaryColor(hex)
    local r, g, b = HEXtoRGB(hex)
    return RGBtoHEX(255 - r, 255 - g, 255 - b) -- Вычисляем дополнительный цвет
end

-- Функция для создания градиента между двумя цветами
function generateGradient(hex1, hex2, steps)
    local r1, g1, b1 = HEXtoRGB(hex1)
    local r2, g2, b2 = HEXtoRGB(hex2)
    
    local gradient = {}
    
    for i = 0, steps do
        local r = math.floor(r1 + (r2 - r1) * (i / steps))
        local g = math.floor(g1 + (g2 - g1) * (i / steps))
        local b = math.floor(b1 + (b2 - b1) * (i / steps))
        table.insert(gradient, RGBtoHEX(r, g, b))
    end
    
    return gradient
end

-- Пример использования
local color = "#a47b67" -- Исходный цвет в HEX
local complementaryColor = getComplementaryColor(color)
print("Дополнительный цвет:", complementaryColor)

local gradient = generateGradient(color, complementaryColor, 5)
print("Градиент:")
for _, hex in ipairs(gradient) do
    print(hex)
end

